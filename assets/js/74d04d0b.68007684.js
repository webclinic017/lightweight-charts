"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["42976"],{86271:function(e,t,n){n.r(t),n.d(t,{default:()=>m,frontMatter:()=>l,metadata:()=>a,assets:()=>d,toc:()=>u,contentTitle:()=>c});var a=JSON.parse('{"id":"webcomponents/custom-element","title":"Web Components - Custom Element","description":"A simple example of how to use Lightweight Charts\u2122 within the Web component custom element.","source":"@site/tutorials/webcomponents/01-custom-element.mdx","sourceDirName":"webcomponents","slug":"/webcomponents/custom-element","permalink":"/lightweight-charts/tutorials/webcomponents/custom-element","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Web Components - Custom Element","description":"A simple example of how to use Lightweight Charts\u2122 within the Web component custom element.","pagination_prev":null,"pagination_next":null,"keywords":["web component","custom element","example"]},"sidebar":"tutorialsSidebar"}'),i=n("85893"),r=n("50065"),s=n("44634"),o=n("30353"),h=n("54617");let l={title:"Web Components - Custom Element",description:"A simple example of how to use Lightweight Charts\u2122 within the Web component custom element.",pagination_prev:null,pagination_next:null,keywords:["web component","custom element","example"]},c="Web Components - Custom Element",d={},u=[{value:"About the example custom element",id:"about-the-example-custom-element",level:2},{value:"Component showcase",id:"component-showcase",level:3},{value:"Creating the chart",id:"creating-the-chart",level:2},{value:"Attributes and properties",id:"attributes-and-properties",level:2},{value:"Attributes",id:"attributes",level:3},{value:"Properties",id:"properties",level:3},{value:"Accessing the chart instance or additional methods",id:"accessing-the-chart-instance-or-additional-methods",level:2},{value:"Using a Custom Element",id:"using-a-custom-element",level:2},{value:"Standalone script example html file",id:"standalone-script-example-html-file",level:3},{value:"Complete Sample Code",id:"complete-sample-code",level:2},{value:"Wrapper Custom Element",id:"wrapper-custom-element",level:3},{value:"Example Usage Custom Element",id:"example-usage-custom-element",level:3}];function p(e){let t={a:"a",admonition:"admonition",code:"code",div:"div",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"web-components---custom-element",children:"Web Components - Custom Element"})}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["The following describes a relatively simple example that only allows for a\nsingle ",(0,i.jsx)(t.a,{href:"/docs/series-types",children:"series"})," to be rendered. This example can be used as\na starting point, and could be tweaked further using our extensive\n",(0,i.jsx)(t.a,{href:"/docs/api",children:"API"}),"."]})}),"\n",(0,i.jsxs)(t.p,{children:["This guide will focus on the key concepts required to get Lightweight Charts\u2122\nrunning within a Vanilla JS web component (using\n",(0,i.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements",children:"custom elements"}),").\nPlease note this guide is not intended as a complete step-by-step tutorial. The\nexample web component custom element can be found at the\n",(0,i.jsx)(t.a,{href:"#complete-sample-code",children:"bottom"})," of this guide."]}),"\n",(0,i.jsx)(t.p,{children:"If you are new to Web Components then please have a look at the following\nresources before proceeding further with this example."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements",children:"MDN: Using Custom Elements"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://web.dev/custom-elements-best-practices/",children:"Custom Elements Best Practices"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://open-wc.org",children:"Open Web Components"})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"about-the-example-custom-element",children:"About the example custom element"}),"\n",(0,i.jsx)(t.p,{children:"The example Web Components custom element has the following features."}),"\n",(0,i.jsx)(t.p,{children:"The ability to:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"specify the series type via a component attribute,"}),"\n",(0,i.jsx)(t.li,{children:"specify the series data via a component property,"}),"\n",(0,i.jsx)(t.li,{children:"control the chart, series, time scale, and price scale options via properties,"}),"\n",(0,i.jsx)(t.li,{children:"enable automatic resizing of the chart when the browser is resized."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The example may not fit your requirements completely. Creating a general-purpose\ndeclarative wrapper for Lightweight Charts\u2122 imperative API is a challenge, but\nhopefully, you can adapt this example to your use case."}),"\n",(0,i.jsx)(t.h3,{id:"component-showcase",children:"Component showcase"}),"\n",(0,i.jsx)(t.p,{children:"Presented below is the finished wrapper custom element which is discussed\nthroughout this guide. The interactive buttons beneath the chart are showcasing\nhow to interact with the component and that code is provided below as well\n(within the example app custom element)."}),"\n","\n",(0,i.jsx)(s.Z,{fallback:(0,i.jsx)(t.div,{children:"Loading..."}),children:()=>(n(76438),(0,i.jsx)("lightweight-chart-example",{}))}),"\n",(0,i.jsx)(t.h2,{id:"creating-the-chart",children:"Creating the chart"}),"\n",(0,i.jsxs)(t.p,{children:["Web Components are a suite of different technologies which allow you to\nencapsulate functionality within custom elements.\n",(0,i.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements",children:"Custom elements"}),"\nmake use of the standard web languages ",(0,i.jsx)(t.code,{children:"html"}),", ",(0,i.jsx)(t.code,{children:"css"}),", and ",(0,i.jsx)(t.code,{children:"js"})," which means that\nthere aren't many specific changes, or extra knowledge, required to get\nLightweight Charts\u2122 working within a custom element."]}),"\n",(0,i.jsxs)(t.p,{children:["The process of creating a chart is essentially the same as when using the\nlibrary normally, except that we are encapsulating all the ",(0,i.jsx)(t.code,{children:"html"}),", ",(0,i.jsx)(t.code,{children:"css"}),", and\n",(0,i.jsx)(t.code,{children:"js"})," code specific to the chart within our custom element."]}),"\n",(0,i.jsx)(t.p,{children:"Starting with a simple boilerplate custom element, as shown below:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"(function() {\n    class LightweightChartWC extends HTMLElement {\n        connectedCallback() {\n            this.attachShadow({ mode: 'open' });\n        }\n\n        disconnectedCallback() {}\n    }\n\n    // Register our custom element with a specific tag name.\n    window.customElements.define('lightweight-chart', LightweightChartWC);\n})();\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The first step is to define the ",(0,i.jsx)(t.code,{children:"html"})," for the custom element. For Lightweight\nCharts, all we need to do is create a ",(0,i.jsx)(t.code,{children:"div"})," element to act as our container\nelement. You can create the html by cloning a ",(0,i.jsx)(t.code,{children:"template"})," (as seen in our usage\nexample below) or by imperatively using the DOM JS api as shown below:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// hide-start\nclass LightweightChartWC extends HTMLElement {\n    // ...\n    // hide-end\n    // Within the class definition\n    connectedCallback() {\n        // Create the div container for the chart\n        const container = document.createElement('div');\n        container.setAttribute('class', 'chart-container');\n\n        this.shadowRoot.append(container);\n    }\n    // hide-line\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Next we will want to define some basic styles to ensure that the container\nelement fills the available space and that the element can be hidden using the\n",(0,i.jsx)(t.code,{children:"hidden"})," attribute."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// Outside of the Class definition\nconst elementStyles = `\n    :host {\n        display: block;\n    }\n    :host[hidden] {\n        display: none;\n    }\n    .chart-container {\n        height: 100%;\n        width: 100%;\n    }\n`;\n\n// ...\n\n// hide-start\nclass LightweightChartWC extends HTMLElement {\n    // ...\n    // hide-end\n    // Within the class definition\n    connectedCallback() {\n        // highlight-fade-start\n        // Create the div container for the chart\n        const container = document.createElement('div');\n        container.setAttribute('class', 'chart-container');\n        // highlight-fade-end\n        // create the stylesheet for the custom element\n        const style = document.createElement('style');\n        style.textContent = elementStyles;\n        this.shadowRoot.append(style, container);\n    }\n    // hide-line\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Finally, we can now create the chart using Lightweight Charts\u2122. Depending on your\nbuild process, you may either need to import Lightweight Charts\u2122, or access it\nfrom the global scope (if loaded as a standalone script). To create the chart,\nwe call the ",(0,i.jsx)(t.a,{href:"/docs/api/functions/createChart",children:(0,i.jsx)(t.code,{children:"createChart"})})," constructor function, passing\nour container element as the first argument. The returned variable will be a\n",(0,i.jsx)(t.a,{href:"/docs/api/interfaces/IChartApi",children:(0,i.jsx)(t.code,{children:"IChartApi"})})," instance which we can use as shown\nin the API documentation. The IChartApi instance provides all the required\nfunctionality to create series, assign data, and more. See our\n",(0,i.jsx)(t.a,{href:"/docs",children:"Getting started"})," guide for a quick example."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// hide-start\nclass LightweightChartWC extends HTMLElement {\n    // ...\n    // hide-end\n    connectedCallback() {\n        // highlight-fade-start\n        // Create the div container for the chart\n        const container = document.createElement('div');\n        container.setAttribute('class', 'chart-container');\n\n        // create the stylesheet for the custom element\n        const style = document.createElement('style');\n        style.textContent = elementStyles;\n        this.shadowRoot.append(style, container);\n        // highlight-fade-end\n\n        // Create the Lightweight Chart\n        this.chart = createChart(container);\n    }\n    // hide-line\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"attributes-and-properties",children:"Attributes and properties"}),"\n",(0,i.jsx)(t.p,{children:"Whilst we could encapsulate everything required to create a chart within the\ncustom element, generally we wish to allow further customisation of the chart to\nthe consumers of the custom element. Attributes and properties are a great way\nto provide this 'API' to the consumer."}),"\n",(0,i.jsx)(t.p,{children:"As a general rule of thumb, it is better to use attributes for options which are\ndefined using simple values (number, string, boolean), and properties for rich\ndata types."}),"\n",(0,i.jsxs)(t.p,{children:["In our example, we will be using attributes for the series type option (type)\nand the autosize flag which enables automatic resizing of the chart when the\nwindow is resized. We will be using properties to provide the interfaces for\nsetting the series data, and options for the chart. Additionally, the IChartApi\ninstance will be accessable via the ",(0,i.jsx)(t.code,{children:"chart"})," property such that the consumer has\nfull access to the entire API provided by Lightweight Charts\u2122."]}),"\n",(0,i.jsx)(t.h3,{id:"attributes",children:"Attributes"}),"\n",(0,i.jsx)(t.p,{children:"Attributes for the custom element can be set directly on the custom element\n(within the html), or via javascript as seen for the properties in the next\nsection."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-html",children:'<lightweight-chart autosize type="area"></lightweight-chart>\n'})}),"\n",(0,i.jsx)(t.p,{children:"Attributes can be set and read from within the custom element's definition as\nfollows:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// read `type` attribute\nconst type = this.getAttribute('type');\n\n// set `type` attribute\nthis.setAttribute('type', 'line');\n"})}),"\n",(0,i.jsx)(t.p,{children:"It is recommended that attributes be mirrored as properties on the custom\nelement (and reflected such that any changes appear on the html as well). This\ncan be achieved as follows:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// hide-start\nclass LightweightChartWC extends HTMLElement {\n    // ...\n    // hide-end\n    // Within the class definition\n    set type(value) {\n        this.setAttribute('type', value || 'line');\n    }\n\n    get type() {\n        return this.getAttribute('type') || 'line';\n    }\n    // hide-line\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["We can observe any changes to an attribute by defining the static\n",(0,i.jsx)(t.code,{children:"observedAttributes"})," getter on the custom element and the\n",(0,i.jsx)(t.code,{children:"attributeChangedCallback"})," method on the class definition."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"class LightweightChartWC extends HTMLElement {\n    // Attributes to observe. When changes occur, `attributeChangedCallback` is called.\n    static get observedAttributes() {\n        return ['type', 'autosize'];\n    }\n\n    /**\n     * `attributeChangedCallback()` is called when any of the attributes in the\n     * `observedAttributes` array are changed.\n     */\n    attributeChangedCallback(name, _oldValue, newValue) {\n        if (!this.chart) {\n            return;\n        }\n        const hasValue = newValue !== null;\n        switch (name) {\n        case 'type':\n            // handle the changed attribute\n            break;\n        case 'autosize':\n            // handle the changed attribute\n            break;\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(t.p,{children:["Properties for the custom element are read and set through javascript on a\nreference to a custom element's instance. This instance can be created using\nstandard DOM methods such as ",(0,i.jsx)(t.code,{children:"querySelector"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// Get a reference to an instance of the custom element on the page\nconst myChartElement = document.querySelector('lightweight-chart');\n\n// read the data property\nconst currentData = myChartElement.data;\n\n// set the seriesOptions property\nmyChartElement.seriesOptions = {\n    color: 'blue',\n};\n"})}),"\n",(0,i.jsx)(t.p,{children:"We can define setters and getters for the properties if we need more control\nover the property instead of it being just a value."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// hide-start\nclass LightweightChartWC extends HTMLElement {\n    // ...\n    // hide-end\n    // Within the class definition\n    set options(value) {\n        if (!this.chart) {\n            return;\n        }\n        this.chart.applyOptions(value);\n    }\n\n    get options() {\n        if (!this.chart) {\n            return null;\n        }\n        return this.chart.options();\n    }\n    // hide-line\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"As mentioned earlier, it is recommended that any API which accepts complex (or\nrich data) beyond a simple string, number, or boolean value should be property.\nHowever, since properties can only be set via javascript there may be cases\nwhere it would be preferable to define these values within the html markup. We\ncan provide an attribute interface for these properties which can be used to\ndefine the initial values, then remove those attributes from the markup and\nignore any further changes to those attributes."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// hide-line\nclass LightweightChartWC extends HTMLElement {\n    /**\n     * Any data properties which are provided as JSON string values\n     * when the component is attached to the DOM will be used as the\n     * initial values for those properties.\n     *\n     * Note: once the component is attached, then any changes to these\n     * attributes will be ignored (not observed), and should rather be\n     * set using the property directly.\n     */\n    _tryLoadInitialProperty(name) {\n        if (this.hasAttribute(name)) {\n            const valueString = this.getAttribute(name);\n            let value;\n            try {\n                value = JSON.parse(valueString);\n            } catch (error) {\n                console.error(\n                    `Unable to read attribute ${name}'s value during initialisation.`\n                );\n                return;\n            }\n            // change kebab case attribute name to camel case.\n            const propertyName = name\n                .split('-')\n                .map((text, index) => {\n                    if (index < 1) {\n                        return text;\n                    }\n                    return `${text.charAt(0).toUpperCase()}${text.slice(1)}`;\n                })\n                .join('');\n            this[propertyName] = value;\n            this.removeAttribute(name);\n        }\n    }\n\n    connectedCallback() {\n        // ...\n\n        // Read initial values using attributes and then clear the attributes\n        // since we don't want to 'reflect' data properties onto the elements\n        // attributes.\n        const richDataProperties = [\n            'options',\n            'series-options',\n            'pricescale-options',\n            'timescale-options',\n        ];\n        richDataProperties.forEach(propertyName => {\n            this._tryLoadInitialProperty(propertyName);\n        });\n    }\n    // hide-line\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"These attributes can be used to define the initial values for the properties as\nfollows (using JSON notation):"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-html",children:'<lightweight-chart\n    data=\'[{"time": "2022-09-14", "value": 123.45},{"time": "2022-09-15", "value": 123.45}]\'\n    series-options=\'{"color":"blue"}\'\n></lightweight-chart>\n'})}),"\n",(0,i.jsx)(t.h2,{id:"accessing-the-chart-instance-or-additional-methods",children:"Accessing the chart instance or additional methods"}),"\n",(0,i.jsxs)(t.p,{children:["The IChartApi instance will be accessible via the ",(0,i.jsx)(t.code,{children:"chart"})," property on the custom\nelement. This can be used by the consumer of the custom element to fully control\nthe chart within the element."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// Get a reference to an instance of the custom element on the page\nconst myChartElement = document.querySelector('lightweight-chart');\n\nconst chartApi = myChartElement.chart;\n\n// For example, call the `fitContent` method on the time scale\nchartApi.timeScale().fitContent();\n"})}),"\n",(0,i.jsx)(t.h2,{id:"using-a-custom-element",children:"Using a Custom Element"}),"\n",(0,i.jsxs)(t.p,{children:["Custom elements can be used just like any other normal html element after the\ncustom element has been defined and registered. The example custom element will\ndefine and register itself (using\n",(0,i.jsx)(t.code,{children:"window.customElements.define('lightweight-chart', LightweightChartWC);"}),") when\nthe script is loaded and executed, so all you need to do is include the script\ntag on the page."]}),"\n",(0,i.jsx)(t.p,{children:"Depending on your build step for your page, you may either need to import\nLightweight Charts\u2122 via an import statement, or access the library via the global\nvariable defined when using the standalone script version."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// if using esm version (installed via npm):\n// import { createChart } from 'lightweight-charts';\n\n// If using standalone version (loaded via a script tag):\nconst { createChart } = LightweightCharts;\n"})}),"\n",(0,i.jsx)(t.p,{children:"Similarily, the custom element can either be loaded via an 'side-effect' import\nstatement:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// side-effect import statement (use within a module js file)\nimport './lw-chart.js';\n"})}),"\n",(0,i.jsx)(t.p,{children:"or via a script tag:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-html",children:'<script src="lw-chart.js" defer><\/script>\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Once the custom element script has been loaded and executed then you can use the\ncustom element anywhere that you can use normal html, including within other\nframeworks like React, Vue, and Angular. See\n",(0,i.jsx)(t.a,{href:"https://custom-elements-everywhere.com",children:"Custom Elements Everywhere"})," for more\ninformation."]}),"\n",(0,i.jsx)(t.h3,{id:"standalone-script-example-html-file",children:"Standalone script example html file"}),"\n",(0,i.jsx)(t.p,{children:"If you are loading the Lightweight Charts\u2122 library via the standalone script\nversion then you can also load the custom element via a script tag (see above\nsection for more info) and construct your html page as follows:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-html",children:'<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset="UTF-8" />\n        <meta\n            name="viewport"\n            content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0"\n        />\n        <title>Web component Example</title>\n        <script\n            type="text/javascript"\n            src="https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.development.js"\n        ><\/script>\n        <style>\n            #my-chart {\n                height: 100vh;\n                width: 100vw;\n            }\n        </style>\n    </head>\n\n    <body style="padding: 0; margin: 0">\n        <lightweight-chart\n            id="my-chart"\n            autosize\n            type="line"\n            series-options=\'{"color": "red"}\'\n            data=\'[{ "time": "2018-10-19", "value": 52.89 },{ "time": "2018-10-22", "value": 51.65 }]\'\n        ></lightweight-chart>\n\n        <script src="lw-chart.js" defer><\/script>\n    </body>\n</html>\n'})}),"\n",(0,i.jsx)(t.h2,{id:"complete-sample-code",children:"Complete Sample Code"}),"\n",(0,i.jsx)(t.p,{children:"Presented below is the complete custom element source code for the Web\ncomponent. We have also provided a sample custom element component which\nshowcases how to make use of these components within a typical html page."}),"\n",(0,i.jsx)(t.h3,{id:"wrapper-custom-element",children:"Wrapper Custom Element"}),"\n",(0,i.jsx)(t.p,{children:"The following code block contains the source code for the wrapper custom\nelement."}),"\n",(0,i.jsx)("p",{children:(0,i.jsx)("a",{href:n(80885).Z,download:"lw-chart.js",target:"\\_blank",children:(0,i.jsx)(t.p,{children:"Download file"})})}),"\n","\n",(0,i.jsxs)(h.Z,{children:[(0,i.jsx)("summary",{children:"Click here to reveal the code."}),(0,i.jsx)(o.ZP,{className:"language-js",children:"// if using esm version (installed via npm):\nimport { createChart, LineSeries, AreaSeries, CandlestickSeries, BaselineSeries, HistogramSeries, BarSeries } from 'lightweight-charts';\n\n// If using standalone version (loaded via a script tag):\n// const { createChart } = LightweightCharts;\n\n(function() {\n	// Styles for the custom element\n	const elementStyles = `\n                    :host {\n                        display: block;\n                    }\n                    :host[hidden] {\n                        display: none;\n                    }\n                    .chart-container {\n                        height: 100%;\n                        width: 100%;\n                    }\n                `;\n\n	// Class definition for the custom element\n	class LightweightChartWC extends HTMLElement {\n		// Attributes to observe. When changes occur, `attributeChangedCallback` is called.\n		static get observedAttributes() {\n			return ['type', 'autosize'];\n		}\n\n		static getChartSeriesDefinition(type) {\n			switch (type) {\n				case 'line':\n					return LineSeries;\n				case 'area':\n					return AreaSeries;\n				case 'candlestick':\n					return CandlestickSeries;\n				case 'baseline':\n					return BaselineSeries;\n				case 'bar':\n					return BarSeries;\n				case 'histogram':\n					return HistogramSeries;\n			}\n			throw new Error(`${type} is an unsupported series type`);\n		}\n\n		constructor() {\n			super();\n			this.chart = undefined;\n			this.series = undefined;\n			this.__data = [];\n			this._resizeEventHandler = () => this._resizeHandler();\n		}\n\n		/**\n		 * `connectedCallback()` fires when the element is inserted into the DOM.\n		 */\n		connectedCallback() {\n			this.attachShadow({ mode: 'open' });\n\n			/**\n			 * Attributes you may want to set, but should only change if\n			 * not already specified.\n			 */\n			// if (!this.hasAttribute('tabindex'))\n			// this.setAttribute('tabindex', -1);\n\n			// A user may set a property on an _instance_ of an element,\n			// before its prototype has been connected to this class.\n			// The `_upgradeProperty()` method will check for any instance properties\n			// and run them through the proper class setters.\n			this._upgradeProperty('type');\n			this._upgradeProperty('autosize');\n\n			// We load the data attribute before creating the chart\n			// so the `setTypeAndData` method can have an initial value.\n			this._tryLoadInitialProperty('data');\n\n			// Create the div container for the chart\n			const container = document.createElement('div');\n			container.setAttribute('class', 'chart-container');\n			// create the stylesheet for the custom element\n			const style = document.createElement('style');\n			style.textContent = elementStyles;\n			this.shadowRoot.append(style, container);\n\n			// Create the Lightweight Chart\n			this.chart = createChart(container);\n			this.setTypeAndData();\n\n			// Read initial values using attributes and then clear the attributes\n			// since we don't want to 'reflect' data properties onto the elements\n			// attributes.\n			const richDataProperties = [\n				'options',\n				'series-options',\n				'pricescale-options',\n				'timescale-options',\n			];\n			richDataProperties.forEach(propertyName => {\n				this._tryLoadInitialProperty(propertyName);\n			});\n\n			if (this.autosize) {\n				window.addEventListener('resize', this._resizeEventHandler);\n			}\n		}\n\n		/**\n		 * Any data properties which are provided as JSON string values\n		 * when the component is attached to the DOM will be used as the\n		 * initial values for those properties.\n		 *\n		 * Note: once the component is attached, then any changes to these\n		 * attributes will be ignored (not observed), and should rather be\n		 * set using the property directly.\n		 */\n		_tryLoadInitialProperty(name) {\n			if (this.hasAttribute(name)) {\n				const valueString = this.getAttribute(name);\n				let value;\n				try {\n					value = JSON.parse(valueString);\n				} catch (error) {\n					console.error(\n						`Unable to read attribute ${name}'s value during initialisation.`\n					);\n					return;\n				}\n				// change kebab case attribute name to camel case.\n				const propertyName = name\n					.split('-')\n					.map((text, index) => {\n						if (index < 1) {return text;}\n						return `${text.charAt(0).toUpperCase()}${text.slice(1)}`;\n					})\n					.join('');\n				this[propertyName] = value;\n				this.removeAttribute(name);\n			}\n		}\n\n		// Create a chart series (according to the 'type' attribute) and set it's data.\n		setTypeAndData() {\n			if (this.series && this.chart) {\n				this.chart.removeSeries(this.series);\n			}\n			this.series =\n				this.chart.addSeries(LightweightChartWC.getChartSeriesDefinition(this.type));\n			this.series.setData(this.data);\n		}\n\n		_upgradeProperty(prop) {\n			if (this.hasOwnProperty(prop)) {\n				const value = this[prop];\n				delete this[prop];\n				this[prop] = value;\n			}\n		}\n\n		/**\n		 * `disconnectedCallback()` fires when the element is removed from the DOM.\n		 * It's a good place to do clean up work like releasing references and\n		 * removing event listeners.\n		 */\n		disconnectedCallback() {\n			if (this.chart) {\n				this.chart.remove();\n				this.chart = null;\n			}\n			window.removeEventListener('resize', this._resizeEventHandler);\n		}\n\n		/**\n		 * Reflected Properties\n		 *\n		 * These Properties and their corresponding attributes should mirror one another.\n		 */\n		set type(value) {\n			this.setAttribute('type', value || 'line');\n		}\n\n		get type() {\n			return this.getAttribute('type') || 'line';\n		}\n\n		set autosize(value) {\n			const autosize = Boolean(value);\n			if (autosize) {this.setAttribute('autosize', '');} else {this.removeAttribute('autosize');}\n		}\n\n		get autosize() {\n			return this.hasAttribute('autosize');\n		}\n\n		/**\n		 * Rich Data Properties\n		 *\n		 * These Properties are not reflected to a corresponding attribute.\n		 */\n		set data(value) {\n			let newData = value;\n			if (typeof newData !== 'object' || !Array.isArray(newData)) {\n				newData = [];\n				console.warn('Lightweight Charts: Data should be an array');\n			}\n			this.__data = newData;\n			if (this.series) {\n				this.series.setData(this.__data);\n			}\n		}\n\n		get data() {\n			return this.__data;\n		}\n\n		set options(value) {\n			if (!this.chart) {return;}\n			this.chart.applyOptions(value);\n		}\n\n		get options() {\n			if (!this.chart) {return null;}\n			return this.chart.options();\n		}\n\n		set seriesOptions(value) {\n			if (!this.series) {return;}\n			this.series.applyOptions(value);\n		}\n\n		get seriesOptions() {\n			if (!this.series) {return null;}\n			return this.series.options();\n		}\n\n		set priceScaleOptions(value) {\n			if (!this.chart) {return;}\n			this.chart.priceScale().applyOptions(value);\n		}\n\n		get priceScaleOptions() {\n			if (!this.series) {return null;}\n			return this.chart.priceScale().options();\n		}\n\n		set timeScaleOptions(value) {\n			if (!this.chart) {return;}\n			this.chart.timeScale().applyOptions(value);\n		}\n\n		get timeScaleOptions() {\n			if (!this.series) {return null;}\n			return this.chart.timeScale().options();\n		}\n\n		/**\n		 * `attributeChangedCallback()` is called when any of the attributes in the\n		 * `observedAttributes` array are changed.\n		 */\n		attributeChangedCallback(name, _oldValue, newValue) {\n			if (!this.chart) {return;}\n			const hasValue = newValue !== null;\n			switch (name) {\n				case 'type':\n					this.data = [];\n					this.setTypeAndData();\n					break;\n				case 'autosize':\n					if (hasValue) {\n						window.addEventListener('resize', () => this._resizeEventHandler);\n						// call once when added to an existing element\n						this._resizeEventHandler();\n					} else {\n						window.removeEventListener('resize', this._resizeEventHandler);\n					}\n					break;\n			}\n		}\n\n		_resizeHandler() {\n			const container = this.shadowRoot.querySelector('div.chart-container');\n			if (!this.chart || !container) {return;}\n			const dimensions = container.getBoundingClientRect();\n			this.chart.resize(dimensions.width, dimensions.height);\n		}\n	}\n\n	window.customElements.define('lightweight-chart', LightweightChartWC);\n})();\n"})]}),"\n",(0,i.jsx)(t.h3,{id:"example-usage-custom-element",children:"Example Usage Custom Element"}),"\n",(0,i.jsx)(t.p,{children:"The following code block contains the source code for the custom element\nshowcasing how to use the above custom element."}),"\n",(0,i.jsx)("p",{children:(0,i.jsx)("a",{href:n(23407).Z,download:"wc-example.js",target:"\\_blank",children:(0,i.jsx)(t.p,{children:"Download file"})})}),"\n","\n",(0,i.jsxs)(h.Z,{children:[(0,i.jsx)("summary",{children:"Click here to reveal the code."}),(0,i.jsx)(o.ZP,{className:"language-js",children:"import './lw-chart.js';\nimport { themeColors } from '../../../theme-colors';\n\n(function() {\n	const template = document.createElement('template');\n	template.innerHTML = `\n    <style>\n    :host {\n        display: block;\n    }\n    :host[hidden] {\n        display: none;\n    }\n    #example {\n        display: flex;\n        flex-direction: column;\n        height: 100%;\n        width: 100%;\n    }\n    #chart {\n        flex-grow: 1;\n    }\n    #buttons {\n        flex-direction: row;\n    }\n    button {\n        border-radius: 8px;\n        border: 1px solid transparent;\n        padding: 0.5em 1em;\n        font-size: 1em;\n        font-weight: 500;\n        font-family: inherit;\n        background-color: var(--hero-button-background-color-active, #e9e9e9);\n        color: var(--hero-button-text-color, #e9e9e9);\n        cursor: pointer;\n        transition: border-color 0.25s;\n        margin-left: 0.5em;\n      }\n      button:hover {\n        border-color: #3179F5;\n        background-color: var(--hero-button-background-color-hover);\n        color: var(--hero-button-text-color-hover-active);\n      }\n      button:focus,\n      button:focus-visible {\n        outline: 4px auto -webkit-focus-ring-color;\n      }\n        \n      #example-chart {\n        height: var(--lwchart-height, 300px);\n      }\n    </style>\n    <div id=\"example\">\n        <div id=\"example-container\">\n            <lightweight-chart id=\"example-chart\"\n                autosize\n                type=\"line\"\n            ></lightweight-chart>\n        </div>\n        <div id=\"buttons\">\n            <button id=\"change-colours-button\" type=\"button\">Set Random Colors</button>\n            <button id=\"change-type-button\" type=\"button\">Change Chart Type</button>\n            <button id=\"change-data-button\" type=\"button\">Change Data</button>\n        </div>\n    </div>\n  `;\n\n	function generateSampleData(ohlc) {\n		const randomFactor = 25 + Math.random() * 25;\n		const samplePoint = i =>\n			i *\n				(0.5 +\n					Math.sin(i / 10) * 0.2 +\n					Math.sin(i / 20) * 0.4 +\n					Math.sin(i / randomFactor) * 0.8 +\n					Math.sin(i / 500) * 0.5) +\n			200;\n\n		const res = [];\n		const date = new Date(Date.UTC(2018, 0, 1, 0, 0, 0, 0));\n		const numberOfPoints = ohlc ? 100 : 500;\n		for (let i = 0; i < numberOfPoints; ++i) {\n			const time = date.getTime() / 1000;\n			const value = samplePoint(i);\n			if (ohlc) {\n				const randomRanges = [\n					-1 * Math.random(),\n					Math.random(),\n					Math.random(),\n				].map(j => j * 10);\n				const sign = Math.sin(Math.random() - 0.5);\n				res.push({\n					time,\n					low: value + randomRanges[0],\n					high: value + randomRanges[1],\n					open: value + sign * randomRanges[2],\n					close: samplePoint(i + 1),\n				});\n			} else {\n				res.push({\n					time,\n					value,\n				});\n			}\n\n			date.setUTCDate(date.getUTCDate() + 1);\n		}\n\n		return res;\n	}\n\n	const randomShade = () => Math.round(Math.random() * 255);\n\n	const randomColor = (alpha = 1) =>\n		`rgba(${randomShade()}, ${randomShade()}, ${randomShade()}, ${alpha})`;\n\n	const colorsTypeMap = {\n		area: [\n			['topColor', 0.4],\n			['bottomColor', 0],\n			['lineColor', 1],\n		],\n		bar: [\n			['upColor', 1],\n			['downColor', 1],\n		],\n		baseline: [\n			['topFillColor1', 0.28],\n			['topFillColor2', 0.05],\n			['topLineColor', 1],\n			['bottomFillColor1', 0.28],\n			['bottomFillColor2', 0.05],\n			['bottomLineColor', 1],\n		],\n		candlestick: [\n			['upColor', 1],\n			['downColor', 1],\n			['borderUpColor', 1],\n			['borderDownColor', 1],\n			['wickUpColor', 1],\n			['wickDownColor', 1],\n		],\n		histogram: [['color', 1]],\n		line: [['color', 1]],\n	};\n\n	const checkPageTheme = () =>\n		document.documentElement.getAttribute('data-theme') === 'dark';\n\n	class LightweightChartExampleWC extends HTMLElement {\n		constructor() {\n			super();\n			this.chartElement = undefined;\n		}\n\n		connectedCallback() {\n			this.attachShadow({ mode: 'open' });\n			this.shadowRoot.appendChild(template.content.cloneNode(true));\n\n			this.changeChartTheme(checkPageTheme());\n\n			if (window.MutationObserver) {\n				const callback = _ => {\n					this.changeChartTheme(checkPageTheme());\n				};\n				this.observer = new window.MutationObserver(callback);\n				this.observer.observe(document.documentElement, { attributes: true });\n			}\n\n			this.chartElement = this.shadowRoot.querySelector('#example-chart');\n			this._changeData();\n\n			this.addButtonClickHandlers();\n			this.chartElement.chart.timeScale().fitContent();\n		}\n\n		addButtonClickHandlers() {\n			this.changeColours = () => this._changeColours();\n			this.changeType = () => this._changeType();\n			this.changeData = () => this._changeData();\n			this.shadowRoot\n				.querySelector('#change-colours-button')\n				.addEventListener('click', this.changeColours);\n			this.shadowRoot\n				.querySelector('#change-type-button')\n				.addEventListener('click', this.changeType);\n			this.shadowRoot\n				.querySelector('#change-data-button')\n				.addEventListener('click', this.changeData);\n		}\n\n		removeButtonClickHandlers() {\n			if (this.changeColours) {\n				this.shadowRoot\n					.querySelector('#change-colours-button')\n					.removeEventListener('click', this.changeColours);\n			}\n			if (this.changeType) {\n				this.shadowRoot\n					.querySelector('#change-type-button')\n					.removeEventListener('click', this.changeType);\n			}\n			if (this.changeData) {\n				this.shadowRoot\n					.querySelector('#change-data-button')\n					.removeEventListener('click', this.changeData);\n			}\n		}\n\n		_changeColours() {\n			if (!this.chartElement) {\n				return;\n			}\n			const options = {};\n			const colorsToSet = colorsTypeMap[this.chartElement.type];\n			colorsToSet.forEach(c => {\n				options[c[0]] = randomColor(c[1]);\n			});\n			this.chartElement.seriesOptions = options;\n		}\n\n		_changeData() {\n			if (!this.chartElement) {\n				return;\n			}\n			const candlestickTypeData = ['candlestick', 'bar'].includes(\n				this.chartElement.type\n			);\n			const newData = generateSampleData(candlestickTypeData);\n			this.chartElement.data = newData;\n			if (this.chartElement.type === 'baseline') {\n				const average =\n					newData.reduce((s, c) => s + c.value, 0) / newData.length;\n				this.chartElement.seriesOptions = {\n					baseValue: { type: 'price', price: average },\n				};\n			}\n		}\n\n		_changeType() {\n			if (!this.chartElement) {\n				return;\n			}\n			const types = [\n				'line',\n				'area',\n				'baseline',\n				'histogram',\n				'candlestick',\n				'bar',\n			].filter(t => t !== this.chartElement.type);\n			const randIndex = Math.round(Math.random() * (types.length - 1));\n			this.chartElement.type = types[randIndex];\n			this._changeData();\n\n			// call a method on the component.\n			this.chartElement.chart.timeScale().fitContent();\n		}\n\n		disconnectedCallback() {}\n\n		changeChartTheme(isDark) {\n			if (!this.chartElement) {\n				return;\n			}\n			const theme = isDark ? themeColors.DARK : themeColors.LIGHT;\n			const gridColor = isDark ? '#424F53' : '#D6DCDE';\n			this.chartElement.options = {\n				layout: {\n					textColor: theme.CHART_TEXT_COLOR,\n					background: {\n						color: theme.CHART_BACKGROUND_COLOR,\n					},\n				},\n				grid: {\n					vertLines: {\n						color: gridColor,\n					},\n					horzLines: {\n						color: gridColor,\n					},\n				},\n			};\n		}\n	}\n\n	window.customElements.define(\n		'lightweight-chart-example',\n		LightweightChartExampleWC\n	);\n})();\n"})]})]})}function m(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},80885:function(e,t,n){n.d(t,{Z:function(){return a}});let a=n.p+"f62794d285e0361f3403b42b2a1b9c6d.js"},23407:function(e,t,n){n.d(t,{Z:function(){return a}});let a=n.p+"703ec77a6e27e9e8617c2a560bc5f77f.js"},30353:function(e,t,n){n.d(t,{ZP:()=>w});var a=n("85893"),i=n("67294"),r=n("31705"),s=n("44634"),o=n("79207"),h=n("57378"),l=n("6646");function c(e,t,n){e.addEventListener("resize",()=>{let e=t.getBoundingClientRect();n(e.width,e.height)},!0)}let d={3.8:async e=>{let t=await n.e("70967").then(n.bind(n,51083));return{module:t,createChart:(n,a)=>{let i=t.createChart(n,a);return c(e,n,i.resize.bind(i)),i},createChartEx:void 0,createYieldCurveChart:void 0,createOptionsChart:void 0}},"4.0":async e=>{let t=await n.e("98966").then(n.bind(n,11413));return{module:t,createChart:(n,a)=>{let i=t.createChart(n,a);return c(e,n,i.resize.bind(i)),i},createChartEx:void 0,createYieldCurveChart:void 0,createOptionsChart:void 0}},4.1:async e=>{let t=await n.e("85998").then(n.bind(n,1860));return{module:t,createChart:(n,a)=>{let i=t.createChart(n,a);return c(e,n,i.resize.bind(i)),i},createChartEx:(n,a,i)=>{let r=t.createChartEx(n,a,i);return c(e,n,r.resize.bind(r)),r},createYieldCurveChart:void 0,createOptionsChart:void 0}},4.2:async e=>{let t=await n.e("15373").then(n.bind(n,15757));return{module:t,createChart:(n,a)=>{let i=t.createChart(n,a);return c(e,n,i.resize.bind(i)),i},createChartEx:(n,a,i)=>{let r=t.createChartEx(n,a,i);return c(e,n,r.resize.bind(r)),r},createYieldCurveChart:void 0,createOptionsChart:void 0}},"5.0":async e=>{let t=await n.e("11191").then(n.bind(n,96473));return{module:t,createChart:(n,a)=>{let i=t.createChart(n,a);return c(e,n,i.resize.bind(i)),i},createChartEx:(n,a,i)=>{let r=t.createChartEx(n,a,i);return c(e,n,r.resize.bind(r)),r},createYieldCurveChart:(n,a)=>{let i=t.createYieldCurveChart(n,a);return c(e,n,i.resize.bind(i)),i},createOptionsChart:(n,a)=>{let i=t.createOptionsChart(n,a);return c(e,n,i.resize.bind(i)),i}}},current:async()=>{let e=await n.e("22433").then(n.bind(n,3768));return{module:e,createChart:(t,n)=>{let a=e.createChart(t,n);return c(window,t,a.resize.bind(a)),a},createChartEx:(t,n,a)=>{let i=e.createChartEx(t,n,a);return c(window,t,i.resize.bind(i)),i},createYieldCurveChart:(t,n)=>{let a=e.createYieldCurveChart(t,n);return c(window,t,a.resize.bind(a)),a},createOptionsChart:(t,n)=>{let a=e.createOptionsChart(t,n);return c(window,t,a.resize.bind(a)),a}}}},u={iframe:"iframe_R_Fr"};function p(e){let{script:t,iframeStyle:n}=e,{preferredVersion:r}=(0,h.J)(),s=l&&l.length>0?l["0"]:"",o=r?.name??s??"current",c=`
		<style>
			html,
			body,
			#container {
				width: 100%;
				height: 100%;
				overflow: hidden;
				margin: 0;
			}
		</style>
		<div id="container"></div>
		<script>
			window.run = () => {
				${t}
			};
		</script>
	`,p=i.useRef(null);return i.useEffect(()=>{let e=p.current,t=e?.contentWindow,n=e?.contentDocument;if(null===e||!t||!n)return;let a=async()=>{try{let{module:e,createChart:n,createChartEx:a,createYieldCurveChart:i,createOptionsChart:r}=await d[o](t);Object.assign(t,e),t.createChart=n,t.createChartEx=a,t.createYieldCurveChart=i,t.createOptionsChart=r,"current"===o&&(t.LineSeries=e.LineSeries,t.AreaSeries=e.AreaSeries,t.CandlestickSeries=e.CandlestickSeries,t.BarSeries=e.BarSeries,t.HistogramSeries=e.HistogramSeries),t.run?.()}catch(e){console.error(e)}};if(void 0!==t.run)a();else{let t=()=>{a(),e.removeEventListener("load",t)};e.addEventListener("load",t)}},[c]),(0,a.jsx)("iframe",{ref:p,srcDoc:c,className:u.iframe,style:n},t)}var m=n("98159");let g=()=>`${Math.random().toString(36).slice(2,11)}`,b=Object.keys(m.l.DARK),w=e=>{let{chart:t,replaceThemeConstants:n,hideableCode:h,chartOnly:l,chartOnTop:c=!1,iframeStyle:d,replaceTabs:w=!0,codeUsage:C,...f}=e,{children:y}=e,{colorMode:v}=(0,o.I)(),x=function(){let[e,t]=(0,i.useState)("");return(0,i.useEffect)(()=>t(g()),[]),e}();if(n&&"string"==typeof y&&(y=function(e,t){let n=t?m.l.DARK:m.l.LIGHT,a=e;for(let e of b)a=a.replace(RegExp(e,"g"),`'${n[e]}'`);return a}(y,"dark"===v)),w&&"string"==typeof y&&(y=y.replace(/\t/g,"    ")),y=y.replace(RegExp(/\/\/ delete-start[\w\W]*?\/\/ delete-end/,"gm"),""),t||h){let e=!l&&(0,a.jsx)(r.Z,{...f,children:y}),n=t&&(0,a.jsx)(s.Z,{fallback:(0,a.jsx)("div",{className:u.iframe,children:"\xa0"}),children:()=>(0,a.jsx)(p,{script:y,iframeStyle:d})}),i=h&&(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("input",{id:x,type:"checkbox",className:"toggle-hidden-lines"}),(0,a.jsx)("label",{className:"toggle-label",htmlFor:x,children:"Show all code"})]});return c?(0,a.jsxs)(a.Fragment,{children:[n,C,i,e]}):(0,a.jsxs)(a.Fragment,{children:[C,i,e,n]})}return(0,a.jsx)(r.Z,{...f,children:y})}},54617:function(e,t,n){n.d(t,{Z:()=>r});var a=n("85893"),i=n("67026");n("67294");function r(e){let{children:t}=e;return(0,a.jsx)("details",{className:(0,i.Z)("details_G3qo"),children:t})}},98159:function(e,t,n){n.d(t,{l:function(){return a}});let a={DARK:{CHART_BACKGROUND_COLOR:"black",CHART_BACKGROUND_RGB_COLOR:"0, 0, 0",LINE_LINE_COLOR:"#2962FF",LINE_LINE2_COLOR:"rgb(225, 87, 90)",LINE_LINE3_COLOR:"rgb(242, 142, 44)",LINE_LINE4_COLOR:"rgb(164, 89, 209)",LINE_LINE5_COLOR:"rgb(27, 156, 133)",AREA_TOP_COLOR:"#2962FF",AREA_BOTTOM_COLOR:"rgba(41, 98, 255, 0.28)",BAR_UP_COLOR:"#26a69a",BAR_DOWN_COLOR:"#ef5350",BASELINE_TOP_LINE_COLOR:"rgba( 38, 166, 154, 1)",BASELINE_TOP_FILL_COLOR1:"rgba( 38, 166, 154, 0.28)",BASELINE_TOP_FILL_COLOR2:"rgba( 38, 166, 154, 0.05)",BASELINE_BOTTOM_LINE_COLOR:"rgba( 239, 83, 80, 1)",BASELINE_BOTTOM_FILL_COLOR1:"rgba( 239, 83, 80, 0.05)",BASELINE_BOTTOM_FILL_COLOR2:"rgba( 239, 83, 80, 0.28)",HISTOGRAM_COLOR:"#26a69a",CHART_TEXT_COLOR:"white"},LIGHT:{CHART_BACKGROUND_COLOR:"white",CHART_BACKGROUND_RGB_COLOR:"255, 255, 255",LINE_LINE_COLOR:"#2962FF",LINE_LINE2_COLOR:"rgb(225, 87, 90)",LINE_LINE3_COLOR:"rgb(242, 142, 44)",LINE_LINE4_COLOR:"rgb(164, 89, 209)",LINE_LINE5_COLOR:"rgb(27, 156, 133)",AREA_TOP_COLOR:"#2962FF",AREA_BOTTOM_COLOR:"rgba(41, 98, 255, 0.28)",BAR_UP_COLOR:"#26a69a",BAR_DOWN_COLOR:"#ef5350",BASELINE_TOP_LINE_COLOR:"rgba( 38, 166, 154, 1)",BASELINE_TOP_FILL_COLOR1:"rgba( 38, 166, 154, 0.28)",BASELINE_TOP_FILL_COLOR2:"rgba( 38, 166, 154, 0.05)",BASELINE_BOTTOM_LINE_COLOR:"rgba( 239, 83, 80, 1)",BASELINE_BOTTOM_FILL_COLOR1:"rgba( 239, 83, 80, 0.05)",BASELINE_BOTTOM_FILL_COLOR2:"rgba( 239, 83, 80, 0.28)",HISTOGRAM_COLOR:"#26a69a",CHART_TEXT_COLOR:"black"}}},76438:function(e,t,n){var a=n("34946");!function(){let e=`
                    :host {
                        display: block;
                    }
                    :host[hidden] {
                        display: none;
                    }
                    .chart-container {
                        height: 100%;
                        width: 100%;
                    }
                `;class t extends HTMLElement{static get observedAttributes(){return["type","autosize"]}static getChartSeriesDefinition(e){switch(e){case"line":return a.eh;case"area":return a.f6;case"candlestick":return a.$Y;case"baseline":return a.vW;case"bar":return a.QG;case"histogram":return a.Jv}throw Error(`${e} is an unsupported series type`)}constructor(){super(),this.chart=void 0,this.series=void 0,this.__data=[],this._resizeEventHandler=()=>this._resizeHandler()}connectedCallback(){this.attachShadow({mode:"open"}),this._upgradeProperty("type"),this._upgradeProperty("autosize"),this._tryLoadInitialProperty("data");let t=document.createElement("div");t.setAttribute("class","chart-container");let n=document.createElement("style");n.textContent=e,this.shadowRoot.append(n,t),this.chart=(0,a.C2)(t),this.setTypeAndData(),["options","series-options","pricescale-options","timescale-options"].forEach(e=>{this._tryLoadInitialProperty(e)}),this.autosize&&window.addEventListener("resize",this._resizeEventHandler)}_tryLoadInitialProperty(e){if(this.hasAttribute(e)){let t;let n=this.getAttribute(e);try{t=JSON.parse(n)}catch(t){console.error(`Unable to read attribute ${e}'s value during initialisation.`);return}this[e.split("-").map((e,t)=>t<1?e:`${e.charAt(0).toUpperCase()}${e.slice(1)}`).join("")]=t,this.removeAttribute(e)}}setTypeAndData(){this.series&&this.chart&&this.chart.removeSeries(this.series),this.series=this.chart.addSeries(t.getChartSeriesDefinition(this.type)),this.series.setData(this.data)}_upgradeProperty(e){if(this.hasOwnProperty(e)){let t=this[e];delete this[e],this[e]=t}}disconnectedCallback(){this.chart&&(this.chart.remove(),this.chart=null),window.removeEventListener("resize",this._resizeEventHandler)}set type(e){this.setAttribute("type",e||"line")}get type(){return this.getAttribute("type")||"line"}set autosize(e){e?this.setAttribute("autosize",""):this.removeAttribute("autosize")}get autosize(){return this.hasAttribute("autosize")}set data(e){let t=e;"object"==typeof t&&Array.isArray(t)||(t=[],console.warn("Lightweight Charts: Data should be an array")),this.__data=t,this.series&&this.series.setData(this.__data)}get data(){return this.__data}set options(e){this.chart&&this.chart.applyOptions(e)}get options(){return this.chart?this.chart.options():null}set seriesOptions(e){this.series&&this.series.applyOptions(e)}get seriesOptions(){return this.series?this.series.options():null}set priceScaleOptions(e){this.chart&&this.chart.priceScale().applyOptions(e)}get priceScaleOptions(){return this.series?this.chart.priceScale().options():null}set timeScaleOptions(e){this.chart&&this.chart.timeScale().applyOptions(e)}get timeScaleOptions(){return this.series?this.chart.timeScale().options():null}attributeChangedCallback(e,t,n){if(this.chart)switch(e){case"type":this.data=[],this.setTypeAndData();break;case"autosize":null!==n?(window.addEventListener("resize",()=>this._resizeEventHandler),this._resizeEventHandler()):window.removeEventListener("resize",this._resizeEventHandler)}}_resizeHandler(){let e=this.shadowRoot.querySelector("div.chart-container");if(!this.chart||!e)return;let t=e.getBoundingClientRect();this.chart.resize(t.width,t.height)}}window.customElements.define("lightweight-chart",t)}();var i=n("98159");!function(){let e=document.createElement("template");e.innerHTML=`
    <style>
    :host {
        display: block;
    }
    :host[hidden] {
        display: none;
    }
    #example {
        display: flex;
        flex-direction: column;
        height: 100%;
        width: 100%;
    }
    #chart {
        flex-grow: 1;
    }
    #buttons {
        flex-direction: row;
    }
    button {
        border-radius: 8px;
        border: 1px solid transparent;
        padding: 0.5em 1em;
        font-size: 1em;
        font-weight: 500;
        font-family: inherit;
        background-color: var(--hero-button-background-color-active, #e9e9e9);
        color: var(--hero-button-text-color, #e9e9e9);
        cursor: pointer;
        transition: border-color 0.25s;
        margin-left: 0.5em;
      }
      button:hover {
        border-color: #3179F5;
        background-color: var(--hero-button-background-color-hover);
        color: var(--hero-button-text-color-hover-active);
      }
      button:focus,
      button:focus-visible {
        outline: 4px auto -webkit-focus-ring-color;
      }
        
      #example-chart {
        height: var(--lwchart-height, 300px);
      }
    </style>
    <div id="example">
        <div id="example-container">
            <lightweight-chart id="example-chart"
                autosize
                type="line"
            ></lightweight-chart>
        </div>
        <div id="buttons">
            <button id="change-colours-button" type="button">Set Random Colors</button>
            <button id="change-type-button" type="button">Change Chart Type</button>
            <button id="change-data-button" type="button">Change Data</button>
        </div>
    </div>
  `;let t=()=>Math.round(255*Math.random()),n=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;return`rgba(${t()}, ${t()}, ${t()}, ${e})`},a={area:[["topColor",.4],["bottomColor",0],["lineColor",1]],bar:[["upColor",1],["downColor",1]],baseline:[["topFillColor1",.28],["topFillColor2",.05],["topLineColor",1],["bottomFillColor1",.28],["bottomFillColor2",.05],["bottomLineColor",1]],candlestick:[["upColor",1],["downColor",1],["borderUpColor",1],["borderDownColor",1],["wickUpColor",1],["wickDownColor",1]],histogram:[["color",1]],line:[["color",1]]},r=()=>"dark"===document.documentElement.getAttribute("data-theme");class s extends HTMLElement{constructor(){super(),this.chartElement=void 0}connectedCallback(){this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(e.content.cloneNode(!0)),this.changeChartTheme(r()),window.MutationObserver&&(this.observer=new window.MutationObserver(e=>{this.changeChartTheme(r())}),this.observer.observe(document.documentElement,{attributes:!0})),this.chartElement=this.shadowRoot.querySelector("#example-chart"),this._changeData(),this.addButtonClickHandlers(),this.chartElement.chart.timeScale().fitContent()}addButtonClickHandlers(){this.changeColours=()=>this._changeColours(),this.changeType=()=>this._changeType(),this.changeData=()=>this._changeData(),this.shadowRoot.querySelector("#change-colours-button").addEventListener("click",this.changeColours),this.shadowRoot.querySelector("#change-type-button").addEventListener("click",this.changeType),this.shadowRoot.querySelector("#change-data-button").addEventListener("click",this.changeData)}removeButtonClickHandlers(){this.changeColours&&this.shadowRoot.querySelector("#change-colours-button").removeEventListener("click",this.changeColours),this.changeType&&this.shadowRoot.querySelector("#change-type-button").removeEventListener("click",this.changeType),this.changeData&&this.shadowRoot.querySelector("#change-data-button").removeEventListener("click",this.changeData)}_changeColours(){if(!this.chartElement)return;let e={};a[this.chartElement.type].forEach(t=>{e[t[0]]=n(t[1])}),this.chartElement.seriesOptions=e}_changeData(){if(!this.chartElement)return;let e=function(e){let t=25+25*Math.random(),n=e=>e*(.5+.2*Math.sin(e/10)+.4*Math.sin(e/20)+.8*Math.sin(e/t)+.5*Math.sin(e/500))+200,a=[],i=new Date(Date.UTC(2018,0,1,0,0,0,0)),r=e?100:500;for(let t=0;t<r;++t){let r=i.getTime()/1e3,s=n(t);if(e){let e=[-1*Math.random(),Math.random(),Math.random()].map(e=>10*e),i=Math.sin(Math.random()-.5);a.push({time:r,low:s+e[0],high:s+e[1],open:s+i*e[2],close:n(t+1)})}else a.push({time:r,value:s});i.setUTCDate(i.getUTCDate()+1)}return a}(["candlestick","bar"].includes(this.chartElement.type));if(this.chartElement.data=e,"baseline"===this.chartElement.type){let t=e.reduce((e,t)=>e+t.value,0)/e.length;this.chartElement.seriesOptions={baseValue:{type:"price",price:t}}}}_changeType(){if(!this.chartElement)return;let e=["line","area","baseline","histogram","candlestick","bar"].filter(e=>e!==this.chartElement.type),t=Math.round(Math.random()*(e.length-1));this.chartElement.type=e[t],this._changeData(),this.chartElement.chart.timeScale().fitContent()}disconnectedCallback(){}changeChartTheme(e){if(!this.chartElement)return;let t=e?i.l.DARK:i.l.LIGHT,n=e?"#424F53":"#D6DCDE";this.chartElement.options={layout:{textColor:t.CHART_TEXT_COLOR,background:{color:t.CHART_BACKGROUND_COLOR}},grid:{vertLines:{color:n},horzLines:{color:n}}}}}window.customElements.define("lightweight-chart-example",s)}()},6646:function(e){e.exports=JSON.parse('["5.0","4.2","4.1","4.0","3.8"]')}}]);