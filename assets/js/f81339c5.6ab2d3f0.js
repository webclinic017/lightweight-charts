"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["85113"],{5822:function(e,i,r){r.r(i),r.d(i,{default:()=>h,frontMatter:()=>a,metadata:()=>s,assets:()=>c,toc:()=>d,contentTitle:()=>t});var s=JSON.parse('{"id":"migrations/from-v3-to-v4","title":"From v3 to v4","description":"In this document you can find the migration guide from the previous version v3 to v4.","source":"@site/versioned_docs/version-4.1/migrations/from-v3-to-v4.md","sourceDirName":"migrations","slug":"/migrations/from-v3-to-v4","permalink":"/lightweight-charts/docs/4.1/migrations/from-v3-to-v4","draft":false,"unlisted":false,"tags":[],"version":"4.1","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"From v2 to v3","permalink":"/lightweight-charts/docs/4.1/migrations/from-v2-to-v3"},"next":{"title":"iOS","permalink":"/lightweight-charts/docs/4.1/ios"}}'),o=r("85893"),n=r("50065");let a={},t="From v3 to v4",c={},d=[{value:"Exported enum <code>LasPriceAnimationMode</code> has been removed",id:"exported-enum-laspriceanimationmode-has-been-removed",level:2},{value:"<code>scaleMargins</code> option has been removed from series options",id:"scalemargins-option-has-been-removed-from-series-options",level:2},{value:"<code>backgroundColor</code> from <code>layout</code> options has been removed",id:"backgroundcolor-from-layout-options-has-been-removed",level:2},{value:"<code>overlay</code> property of series options has been removed",id:"overlay-property-of-series-options-has-been-removed",level:2},{value:"<code>priceScale</code> option has been removed",id:"pricescale-option-has-been-removed",level:2},{value:"<code>priceScale()</code> method of chart API now requires to provide price scale id",id:"pricescale-method-of-chart-api-now-requires-to-provide-price-scale-id",level:2},{value:"<code>drawTicks</code> from <code>leftPriceScale</code> and <code>rightPriceScale</code> options has been renamed to <code>ticksVisible</code>",id:"drawticks-from-leftpricescale-and-rightpricescale-options-has-been-renamed-to-ticksvisible",level:2},{value:"The type of outbound time values has been changed",id:"the-type-of-outbound-time-values-has-been-changed",level:2},{value:"<code>seriesPrices</code> property from <code>MouseEventParams</code> has been removed",id:"seriesprices-property-from-mouseeventparams-has-been-removed",level:2},{value:"<code>MouseEventParams</code> field <code>hoveredMarkerId</code> was renamed to <code>hoveredObjectId</code>",id:"mouseeventparams-field-hoveredmarkerid-was-renamed-to-hoveredobjectid",level:2}];function l(e){let i={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.header,{children:(0,o.jsx)(i.h1,{id:"from-v3-to-v4",children:"From v3 to v4"})}),"\n",(0,o.jsx)(i.p,{children:"In this document you can find the migration guide from the previous version v3 to v4."}),"\n",(0,o.jsxs)(i.h2,{id:"exported-enum-laspriceanimationmode-has-been-removed",children:["Exported enum ",(0,o.jsx)(i.code,{children:"LasPriceAnimationMode"})," has been removed"]}),"\n",(0,o.jsxs)(i.p,{children:["Please use ",(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.1/api/enumerations/LastPriceAnimationMode",children:(0,o.jsx)(i.code,{children:"LastPriceAnimationMode"})})," instead."]}),"\n",(0,o.jsxs)(i.h2,{id:"scalemargins-option-has-been-removed-from-series-options",children:[(0,o.jsx)(i.code,{children:"scaleMargins"})," option has been removed from series options"]}),"\n",(0,o.jsx)(i.p,{children:"Previously, you could do something like the following:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-js",children:"const series = chart.addLineSeries({\n    scaleMargins: { /* options here */},\n});\n"})}),"\n",(0,o.jsxs)(i.p,{children:["And ",(0,o.jsx)(i.code,{children:"scaleMargins"})," option was applied to series' price scale as ",(0,o.jsx)(i.code,{children:"scaleMargins"})," option."]}),"\n",(0,o.jsx)(i.p,{children:"Since v4 this option won't be applied to the price scale and will be just ignored (if you're using TypeScript you will get a compilation error)."}),"\n",(0,o.jsx)(i.p,{children:"To fix this, you need to apply these options to series' price scale:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-js",children:"const series = chart.addLineSeries();\n\nseries.priceScale().applyOptions({\n    scaleMargins: { /* options here */},\n});\n"})}),"\n",(0,o.jsxs)(i.h2,{id:"backgroundcolor-from-layout-options-has-been-removed",children:[(0,o.jsx)(i.code,{children:"backgroundColor"})," from ",(0,o.jsx)(i.code,{children:"layout"})," options has been removed"]}),"\n",(0,o.jsxs)(i.p,{children:["If you want to have solid background color you need to use ",(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.1/api/interfaces/LayoutOptions#background",children:(0,o.jsx)(i.code,{children:"background"})})," property instead, e.g. instead of:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-js",children:"const chart = createChart({\n    layout: {\n        backgroundColor: 'red',\n    },\n});\n"})}),"\n",(0,o.jsx)(i.p,{children:"use"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-js",children:"const chart = createChart({\n    layout: {\n        background: {\n            type: ColorType.Solid,\n            color: 'red',\n        },\n    },\n});\n"})}),"\n",(0,o.jsxs)(i.h2,{id:"overlay-property-of-series-options-has-been-removed",children:[(0,o.jsx)(i.code,{children:"overlay"})," property of series options has been removed"]}),"\n",(0,o.jsxs)(i.p,{children:["Please follow ",(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.1/migrations/from-v2-to-v3#creating-overlay",children:"the guide for migrating from v2 to v3"})," where this option was deprecated."]}),"\n",(0,o.jsxs)(i.h2,{id:"pricescale-option-has-been-removed",children:[(0,o.jsx)(i.code,{children:"priceScale"})," option has been removed"]}),"\n",(0,o.jsxs)(i.p,{children:["Please follow ",(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.1/migrations/from-v2-to-v3#two-price-scales",children:"the guide for migrating from v2 to v3"}),"."]}),"\n",(0,o.jsxs)(i.h2,{id:"pricescale-method-of-chart-api-now-requires-to-provide-price-scale-id",children:[(0,o.jsx)(i.code,{children:"priceScale()"})," method of chart API now requires to provide price scale id"]}),"\n",(0,o.jsx)(i.p,{children:"Before v4 you could write the following code:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-js",children:"const priceScale = chart.priceScale();\n"})}),"\n",(0,o.jsxs)(i.p,{children:["And in ",(0,o.jsx)(i.code,{children:"priceScale"})," you had a right price scale if it is visible and a left price scale otherwise."]}),"\n",(0,o.jsxs)(i.p,{children:["Since v4 you have to provide an ID of price scale explicitly, e.g. if you want to get a right price scale you need to provide ",(0,o.jsx)(i.code,{children:"'right'"}),":"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-js",children:"const rightPriceScale = chart.priceScale('right');\nconst leftPriceScale = chart.priceScale('left');\n"})}),"\n",(0,o.jsxs)(i.h2,{id:"drawticks-from-leftpricescale-and-rightpricescale-options-has-been-renamed-to-ticksvisible",children:[(0,o.jsx)(i.code,{children:"drawTicks"})," from ",(0,o.jsx)(i.code,{children:"leftPriceScale"})," and ",(0,o.jsx)(i.code,{children:"rightPriceScale"})," options has been renamed to ",(0,o.jsx)(i.code,{children:"ticksVisible"})]}),"\n",(0,o.jsxs)(i.p,{children:["Since v4 you have to use ",(0,o.jsx)(i.code,{children:"ticksVisible"})," instead of ",(0,o.jsx)(i.code,{children:"drawTicks"}),"."]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-js",children:"const chart = createChart({\n    leftPriceScale: {\n        ticksVisible: false,\n    },\n    rightPriceScale: {\n        ticksVisible: false,\n    },\n});\n"})}),"\n",(0,o.jsx)(i.p,{children:"Also this option is off by default."}),"\n",(0,o.jsx)(i.h2,{id:"the-type-of-outbound-time-values-has-been-changed",children:"The type of outbound time values has been changed"}),"\n",(0,o.jsx)(i.p,{children:"Affected API:"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.1/api/interfaces/IChartApi#subscribeclick",children:(0,o.jsx)(i.code,{children:"IChartApi.subscribeClick"})})," (via ",(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.1/api/interfaces/MouseEventParams#time",children:(0,o.jsx)(i.code,{children:"MouseEventParams.time"})}),")"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.1/api/interfaces/IChartApi#subscribecrosshairmove",children:(0,o.jsx)(i.code,{children:"IChartApi.subscribeCrosshairMove"})})," (via ",(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.1/api/interfaces/MouseEventParams#time",children:(0,o.jsx)(i.code,{children:"MouseEventParams.time"})}),")"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.1/api/interfaces/LocalizationOptions#timeformatter",children:(0,o.jsx)(i.code,{children:"LocalizationOptions.timeFormatter"})})," (via argument of ",(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.1/api/type-aliases/TimeFormatterFn",children:(0,o.jsx)(i.code,{children:"TimeFormatterFn"})}),")"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.1/api/interfaces/TimeScaleOptions#tickmarkformatter",children:(0,o.jsx)(i.code,{children:"TimeScaleOptions.tickMarkFormatter"})})," (via argument of ",(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.1/api/type-aliases/TickMarkFormatter",children:(0,o.jsx)(i.code,{children:"TickMarkFormatter"})}),")"]}),"\n"]}),"\n",(0,o.jsxs)(i.p,{children:["Previously the type of an inbound time (a values you provide to the library, e.g. in ",(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.1/api/interfaces/ISeriesApi#setdata",children:(0,o.jsx)(i.code,{children:"ISeriesApi.setData"})}),") was different from an outbound one (a values the library provides to your code, e.g. an argument of ",(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.1/api/interfaces/LocalizationOptions#timeformatter",children:(0,o.jsx)(i.code,{children:"LocalizationOptions.timeFormatter"})}),").\nSo the difference between types was that outbound time couldn't be a business day string."]}),"\n",(0,o.jsx)(i.p,{children:"Since v4 we improved our API in this matter and now the library will return exactly the same values back for all time-related properties."}),"\n",(0,o.jsxs)(i.p,{children:["Thus, if you provide a string to your series in ",(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.1/api/interfaces/ISeriesApi#setdata",children:(0,o.jsx)(i.code,{children:"ISeriesApi.setData"})}),", you'll receive exactly the same value back:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-js",children:"series.setData([\n    { time: '2001-01-01', value: 1 },\n]);\n\nchart.applyOptions({\n    localization: {\n        timeFormatter: time => time, // will be '2001-01-01' for the bar above\n    },\n    timeScale: {\n        tickMarkFormatter: time => time, // will be '2001-01-01' for the bar above\n    },\n});\n\nchart.subscribeCrosshairMove(param => {\n    console.log(param.time); // will be '2001-01-01' if you hover the bar above\n});\n\nchart.subscribeClick(param => {\n    console.log(param.time); // will be '2001-01-01' if you click on the bar above\n});\n"})}),"\n",(0,o.jsx)(i.p,{children:"Handling this breaking change depends on your needs and your handlers, but generally speaking you need to convert provided time to a desired format manually if it is required.\nFor example, you could use provided helpers to check the type of a time:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-js",children:"import {\n    createChart,\n    isUTCTimestamp,\n    isBusinessDay,\n} from 'lightweight-charts';\n\nconst chart = createChart(document.body);\n\nchart.subscribeClick(param => {\n    if (param.time === undefined) {\n        // the time is undefined, i.e. there is no any data point where a time could be received from\n        return;\n    }\n\n    if (isUTCTimestamp(param.time)) {\n        // param.time is UTCTimestamp\n    } else if (isBusinessDay(param.time)) {\n        // param.time is a BusinessDay object\n    } else {\n        // param.time is a business day string in ISO format, e.g. `'2010-01-01'`\n    }\n});\n"})}),"\n",(0,o.jsxs)(i.h2,{id:"seriesprices-property-from-mouseeventparams-has-been-removed",children:[(0,o.jsx)(i.code,{children:"seriesPrices"})," property from ",(0,o.jsx)(i.code,{children:"MouseEventParams"})," has been removed"]}),"\n",(0,o.jsx)(i.p,{children:"Affected API:"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.1/api/interfaces/IChartApi#subscribeclick",children:(0,o.jsx)(i.code,{children:"IChartApi.subscribeClick"})})}),"\n",(0,o.jsx)(i.li,{children:(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.1/api/interfaces/IChartApi#subscribecrosshairmove",children:(0,o.jsx)(i.code,{children:"IChartApi.subscribeCrosshairMove"})})}),"\n"]}),"\n",(0,o.jsxs)(i.p,{children:["The property ",(0,o.jsx)(i.code,{children:"seriesPrices"})," of ",(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.1/api/interfaces/MouseEventParams",children:(0,o.jsx)(i.code,{children:"MouseEventParams"})})," has been removed."]}),"\n",(0,o.jsxs)(i.p,{children:["Instead, you can use ",(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.1/api/interfaces/MouseEventParams#seriesdata",children:(0,o.jsx)(i.code,{children:"MouseEventParams.seriesData"})})," - it is pretty similar to the old ",(0,o.jsx)(i.code,{children:"seriesPrices"}),", but it contains series' data items instead of just prices:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-js",children:"lineSeries.setData([{ time: '2001-01-01', value: 1 }]);\nbarSeries.setData([{ time: '2001-01-01', open: 5, high: 10, low: 1, close: 7 }]);\n\nchart.subscribeCrosshairMove(param => {\n    console.log(param.seriesData.get(lineSeries)); // { time: '2001-01-01', value: 1 } or undefined\n    console.log(param.seriesData.get(barSeries)); // { time: '2001-01-01', open: 5, high: 10, low: 1, close: 7 } or undefined\n});\n"})}),"\n",(0,o.jsxs)(i.h2,{id:"mouseeventparams-field-hoveredmarkerid-was-renamed-to-hoveredobjectid",children:[(0,o.jsx)(i.code,{children:"MouseEventParams"})," field ",(0,o.jsx)(i.code,{children:"hoveredMarkerId"})," was renamed to ",(0,o.jsx)(i.code,{children:"hoveredObjectId"})]}),"\n",(0,o.jsxs)(i.p,{children:["Since v4 you have to use ",(0,o.jsx)(i.code,{children:"hoveredObjectId"})," instead of ",(0,o.jsx)(i.code,{children:"hoveredMarkerId"}),"."]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-js",children:"chart.subscribeCrosshairMove(param => {\n    console.log(param.hoveredObjectId);\n});\n\nchart.subscribeClick(param => {\n    console.log(param.hoveredObjectId);\n});\n"})})]})}function h(e={}){let{wrapper:i}={...(0,n.a)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},50065:function(e,i,r){r.d(i,{Z:function(){return t},a:function(){return a}});var s=r(67294);let o={},n=s.createContext(o);function a(e){let i=s.useContext(n);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(n.Provider,{value:i},e.children)}}}]);