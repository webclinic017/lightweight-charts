"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["41663"],{23923:function(n,i,t){t.r(i),t.d(i,{default:()=>u,frontMatter:()=>s,metadata:()=>e,assets:()=>l,toc:()=>m,contentTitle:()=>r});var e=JSON.parse('{"id":"plugins/pixel-perfect-rendering/widths/columns","title":"Histogram Column Width Calculations","description":"Describes the calculation for histogram column widths","source":"@site/versioned_docs/version-4.2/plugins/pixel-perfect-rendering/widths/columns.md","sourceDirName":"plugins/pixel-perfect-rendering/widths","slug":"/plugins/pixel-perfect-rendering/widths/columns","permalink":"/lightweight-charts/docs/4.2/plugins/pixel-perfect-rendering/widths/columns","draft":false,"unlisted":false,"tags":[],"version":"4.2","sidebarPosition":0,"frontMatter":{"sidebar_position":0,"sidebar_label":"Columns","pagination_title":"Histogram Column Widths","title":"Histogram Column Width Calculations","description":"Describes the calculation for histogram column widths","keywords":["plugins","extensions","rendering","canvas","bitmap","media","pixels","histogram","column","width"]},"sidebar":"docsSidebar","previous":{"title":"Candlesticks","permalink":"/lightweight-charts/docs/4.2/plugins/pixel-perfect-rendering/widths/candlestick"},"next":{"title":"Crosshair","permalink":"/lightweight-charts/docs/4.2/plugins/pixel-perfect-rendering/widths/crosshair"}}'),o=t("85893"),a=t("50065");let s={sidebar_position:0,sidebar_label:"Columns",pagination_title:"Histogram Column Widths",title:"Histogram Column Width Calculations",description:"Describes the calculation for histogram column widths",keywords:["plugins","extensions","rendering","canvas","bitmap","media","pixels","histogram","column","width"]},r=void 0,l={},m=[];function c(n){let i={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,a.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.admonition,{type:"tip",children:(0,o.jsxs)(i.p,{children:["It is recommend that you first read the ",(0,o.jsx)(i.a,{href:"/lightweight-charts/docs/4.2/plugins/pixel-perfect-rendering/",children:"Pixel Perfect Rendering"})," page."]})}),"\n",(0,o.jsx)(i.p,{children:"The following functions can be used to get the calculated width that the library would use for a histogram column at a specific bar spacing and device pixel ratio."}),"\n",(0,o.jsxs)(i.p,{children:["You can use the ",(0,o.jsx)(i.code,{children:"calculateColumnPositionsInPlace"})," function instead of the ",(0,o.jsx)(i.code,{children:"calculateColumnPositions"})," function to perform the calculation on an existing array of items without needing to create additional arrays (which is more efficient). It is recommended that you memoize the majority of the calculations below to improve the rendering performance."]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-typescript",children:"const alignToMinimalWidthLimit = 4;\nconst showSpacingMinimalBarWidth = 1;\n\n/**\n * Spacing gap between columns.\n * @param barSpacingMedia - spacing between bars (media coordinate)\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns Spacing gap between columns (in Bitmap coordinates)\n */\nfunction columnSpacing(barSpacingMedia: number, horizontalPixelRatio: number) {\n    return Math.ceil(barSpacingMedia * horizontalPixelRatio) <=\n        showSpacingMinimalBarWidth\n        ? 0\n        : Math.max(1, Math.floor(horizontalPixelRatio));\n}\n\n/**\n * Desired width for columns. This may not be the final width because\n * it may be adjusted later to ensure all columns on screen have a\n * consistent width and gap.\n * @param barSpacingMedia - spacing between bars (media coordinate)\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @param spacing - Spacing gap between columns (in Bitmap coordinates). (optional, provide if you have already calculated it)\n * @returns Desired width for column bars (in Bitmap coordinates)\n */\nfunction desiredColumnWidth(\n    barSpacingMedia: number,\n    horizontalPixelRatio: number,\n    spacing?: number\n) {\n    return (\n        Math.round(barSpacingMedia * horizontalPixelRatio) -\n        (spacing ?? columnSpacing(barSpacingMedia, horizontalPixelRatio))\n    );\n}\n\ninterface ColumnCommon {\n    /** Spacing gap between columns */\n    spacing: number;\n    /** Shift columns left by one pixel */\n    shiftLeft: boolean;\n    /** Half width of a column */\n    columnHalfWidthBitmap: number;\n    /** horizontal pixel ratio */\n    horizontalPixelRatio: number;\n}\n\n/**\n * Calculated values which are common to all the columns on the screen, and\n * are required to calculate the individual positions.\n * @param barSpacingMedia - spacing between bars (media coordinate)\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns calculated values for subsequent column calculations\n */\nfunction columnCommon(\n    barSpacingMedia: number,\n    horizontalPixelRatio: number\n): ColumnCommon {\n    const spacing = columnSpacing(barSpacingMedia, horizontalPixelRatio);\n    const columnWidthBitmap = desiredColumnWidth(\n        barSpacingMedia,\n        horizontalPixelRatio,\n        spacing\n    );\n    const shiftLeft = columnWidthBitmap % 2 === 0;\n    const columnHalfWidthBitmap = (columnWidthBitmap - (shiftLeft ? 0 : 1)) / 2;\n    return {\n        spacing,\n        shiftLeft,\n        columnHalfWidthBitmap,\n        horizontalPixelRatio,\n    };\n}\n\ninterface ColumnPosition {\n    left: number;\n    right: number;\n    shiftLeft: boolean;\n}\n\n/**\n * Calculate the position for a column. These values can be later adjusted\n * by a second pass which corrects widths, and shifts columns.\n * @param xMedia - column x position (center) in media coordinates\n * @param columnData - precalculated common values (returned by `columnCommon`)\n * @param previousPosition - result from this function for the previous bar.\n * @returns initial column position\n */\nfunction calculateColumnPosition(\n    xMedia: number,\n    columnData: ColumnCommon,\n    previousPosition: ColumnPosition | undefined\n): ColumnPosition {\n    const xBitmapUnRounded = xMedia * columnData.horizontalPixelRatio;\n    const xBitmap = Math.round(xBitmapUnRounded);\n    const xPositions: ColumnPosition = {\n        left: xBitmap - columnData.columnHalfWidthBitmap,\n        right:\n            xBitmap +\n            columnData.columnHalfWidthBitmap -\n            (columnData.shiftLeft ? 1 : 0),\n        shiftLeft: xBitmap > xBitmapUnRounded,\n    };\n    const expectedAlignmentShift = columnData.spacing + 1;\n    if (previousPosition) {\n        if (xPositions.left - previousPosition.right !== expectedAlignmentShift) {\n            // need to adjust alignment\n            if (previousPosition.shiftLeft) {\n                previousPosition.right = xPositions.left - expectedAlignmentShift;\n            } else {\n                xPositions.left = previousPosition.right + expectedAlignmentShift;\n            }\n        }\n    }\n    return xPositions;\n}\n\nfunction fixPositionsAndReturnSmallestWidth(\n    positions: ColumnPosition[],\n    initialMinWidth: number\n): number {\n    return positions.reduce((smallest: number, position: ColumnPosition) => {\n        if (position.right < position.left) {\n            position.right = position.left;\n        }\n        const width = position.right - position.left + 1;\n        return Math.min(smallest, width);\n    }, initialMinWidth);\n}\n\nfunction fixAlignmentForNarrowColumns(\n    positions: ColumnPosition[],\n    minColumnWidth: number\n) {\n    return positions.map((position: ColumnPosition) => {\n        const width = position.right - position.left + 1;\n        if (width <= minColumnWidth) return position;\n        if (position.shiftLeft) {\n            position.right -= 1;\n        } else {\n            position.left += 1;\n        }\n        return position;\n    });\n}\n\n/**\n * Calculates the column positions and widths for the x positions.\n * This function creates a new array. You may get faster performance using the\n * `calculateColumnPositionsInPlace` function instead\n * @param xMediaPositions - x positions for the bars in media coordinates\n * @param barSpacingMedia - spacing between bars in media coordinates\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @returns Positions for the columns\n */\nexport function calculateColumnPositions(\n    xMediaPositions: number[],\n    barSpacingMedia: number,\n    horizontalPixelRatio: number\n): ColumnPosition[] {\n    const common = columnCommon(barSpacingMedia, horizontalPixelRatio);\n    const positions = new Array<ColumnPosition>(xMediaPositions.length);\n    let previous: ColumnPosition | undefined = undefined;\n    for (let i = 0; i < xMediaPositions.length; i++) {\n        positions[i] = calculateColumnPosition(\n            xMediaPositions[i],\n            common,\n            previous\n        );\n        previous = positions[i];\n    }\n    const initialMinWidth = Math.ceil(barSpacingMedia * horizontalPixelRatio);\n    const minColumnWidth = fixPositionsAndReturnSmallestWidth(\n        positions,\n        initialMinWidth\n    );\n    if (common.spacing > 0 && minColumnWidth < alignToMinimalWidthLimit) {\n        return fixAlignmentForNarrowColumns(positions, minColumnWidth);\n    }\n    return positions;\n}\n\nexport interface ColumnPositionItem {\n    x: number;\n    column?: ColumnPosition;\n}\n\n/**\n * Calculates the column positions and widths for bars using the existing\n * array of items.\n * @param items - bar items which include an `x` property, and will be mutated to contain a column property\n * @param barSpacingMedia - bar spacing in media coordinates\n * @param horizontalPixelRatio - horizontal pixel ratio\n * @param startIndex - start index for visible bars within the items array\n * @param endIndex - end index for visible bars within the items array\n */\nexport function calculateColumnPositionsInPlace(\n    items: ColumnPositionItem[],\n    barSpacingMedia: number,\n    horizontalPixelRatio: number,\n    startIndex: number,\n    endIndex: number\n): void {\n    const common = columnCommon(barSpacingMedia, horizontalPixelRatio);\n    let previous: ColumnPosition | undefined = undefined;\n    for (let i = startIndex; i < Math.min(endIndex, items.length); i++) {\n        items[i].column = calculateColumnPosition(items[i].x, common, previous);\n        previous = items[i].column;\n    }\n    const minColumnWidth = (items as ColumnPositionItem[]).reduce(\n        (smallest: number, item: ColumnPositionItem, index: number) => {\n            if (!item.column || index < startIndex || index > endIndex)\n                return smallest;\n            if (item.column.right < item.column.left) {\n                item.column.right = item.column.left;\n            }\n            const width = item.column.right - item.column.left + 1;\n            return Math.min(smallest, width);\n        },\n        Math.ceil(barSpacingMedia * horizontalPixelRatio)\n    );\n    if (common.spacing > 0 && minColumnWidth < alignToMinimalWidthLimit) {\n        (items as ColumnPositionItem[]).forEach(\n            (item: ColumnPositionItem, index: number) => {\n                if (!item.column || index < startIndex || index > endIndex) return;\n                const width = item.column.right - item.column.left + 1;\n                if (width <= minColumnWidth) return item;\n                if (item.column.shiftLeft) {\n                    item.column.right -= 1;\n                } else {\n                    item.column.left += 1;\n                }\n                return item.column;\n            }\n        );\n    }\n}\n\n"})})]})}function u(n={}){let{wrapper:i}={...(0,a.a)(),...n.components};return i?(0,o.jsx)(i,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}},50065:function(n,i,t){t.d(i,{Z:function(){return r},a:function(){return s}});var e=t(67294);let o={},a=e.createContext(o);function s(n){let i=e.useContext(a);return e.useMemo(function(){return"function"==typeof n?n(i):{...i,...n}},[i,n])}function r(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),e.createElement(a.Provider,{value:i},n.children)}}}]);