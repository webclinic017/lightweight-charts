"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["97425"],{59147:function(e,i,t){t.r(i),t.d(i,{default:()=>l,frontMatter:()=>a,metadata:()=>n,assets:()=>o,toc:()=>h,contentTitle:()=>d});var n=JSON.parse('{"id":"plugins/custom_series","title":"Custom Series Types","description":"Custom series allow developers to create new types of series with their own data","source":"@site/docs/plugins/custom_series.md","sourceDirName":"plugins","slug":"/plugins/custom_series","permalink":"/lightweight-charts/docs/next/plugins/custom_series","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_label":"Custom Series Types","sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Pane Primitives","permalink":"/lightweight-charts/docs/next/plugins/pane-primitives"},"next":{"title":"Canvas Rendering Target","permalink":"/lightweight-charts/docs/next/plugins/canvas-rendering-target"}}'),s=t("85893"),r=t("50065");let a={sidebar_label:"Custom Series Types",sidebar_position:3},d="Custom Series Types",o={},h=[{value:"Defining a Custom Series",id:"defining-a-custom-series",level:2},{value:"Renderer",id:"renderer",level:3},{value:"Update",id:"update",level:3},{value:"Price Value Builder",id:"price-value-builder",level:3},{value:"Whitespace",id:"whitespace",level:3},{value:"Default Options",id:"default-options",level:3},{value:"Destroy",id:"destroy",level:3}];function c(e){let i={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"custom-series-types",children:"Custom Series Types"})}),"\n",(0,s.jsxs)(i.p,{children:["Custom series allow developers to create new types of series with their own data\nstructures, and rendering logic (implemented using\n",(0,s.jsx)(i.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",children:"CanvasRenderingContext2D"}),"\nmethods). These custom series extend the current capabilities of our built-in\nseries, providing a consistent API which mirrors the built-in chart types."]}),"\n",(0,s.jsx)(i.admonition,{type:"note",children:(0,s.jsxs)(i.p,{children:["These series are expected to have a uniform width for each data point, which\nensures that the chart maintains a consistent look and feel across all series\ntypes. The only restriction on the data structure is that it should extend the\n",(0,s.jsx)(i.a,{href:"/lightweight-charts/docs/next/api/interfaces/CustomData",children:(0,s.jsx)(i.code,{children:"CustomData"})})," interface (have a valid time\nproperty for each data point)."]})}),"\n",(0,s.jsx)(i.h2,{id:"defining-a-custom-series",children:"Defining a Custom Series"}),"\n",(0,s.jsxs)(i.p,{children:["A custom series should implement the\n",(0,s.jsx)(i.a,{href:"/lightweight-charts/docs/next/api/interfaces/ICustomSeriesPaneView",children:(0,s.jsx)(i.code,{children:"ICustomSeriesPaneView"})})," interface.\nThe interface defines the basic functionality and structure required for\ncreating a custom series view."]}),"\n",(0,s.jsx)(i.p,{children:"It includes the following methods and properties:"}),"\n",(0,s.jsx)(i.h3,{id:"renderer",children:"Renderer"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["ICustomSeriesPaneView property:\n",(0,s.jsx)(i.a,{href:"/lightweight-charts/docs/next/api/interfaces/ICustomSeriesPaneView#renderer",children:(0,s.jsx)(i.code,{children:"renderer"})})]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["This method should return a renderer which implements the\n",(0,s.jsx)(i.a,{href:"/lightweight-charts/docs/next/api/interfaces/ICustomSeriesPaneRenderer",children:(0,s.jsx)(i.code,{children:"ICustomSeriesPaneRenderer"})}),"\ninterface and is used to draw the series data on the main chart pane."]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.a,{href:"/lightweight-charts/docs/next/api/interfaces/ICustomSeriesPaneRenderer#draw",children:(0,s.jsx)(i.code,{children:"draw"})})," method of the\nrenderer is evoked whenever the chart needs to draw the series."]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.a,{href:"/lightweight-charts/docs/next/api/type-aliases/PriceToCoordinateConverter",children:(0,s.jsx)(i.code,{children:"PriceToCoordinateConverter"})}),"\nprovided as the 2nd argument to the draw method is a convenience function for\nchanging prices into vertical coordinate values. It is provided since the\nseries' original data will most likely be defined in price values, and the\nrenderer needs to draw with coordinates. The values returned by the converter\nwill be defined in mediaSize (unscaled by ",(0,s.jsx)(i.code,{children:"devicePixelRatio"}),")."]}),"\n",(0,s.jsx)(i.admonition,{type:"tip",children:(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"CanvasRenderingTarget2D"})," provided within the ",(0,s.jsx)(i.code,{children:"draw"})," function is explained in\nmore detail on the ",(0,s.jsx)(i.a,{href:"./canvas-rendering-target",children:"Canvas Rendering Target"})," page."]})}),"\n",(0,s.jsx)(i.h3,{id:"update",children:"Update"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["ICustomSeriesPaneView property:\n",(0,s.jsx)(i.a,{href:"/lightweight-charts/docs/next/api/interfaces/ICustomSeriesPaneView#update",children:(0,s.jsx)(i.code,{children:"update"})})]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"This method will be called with the latest data for the renderer to use during\nthe next paint."}),"\n",(0,s.jsxs)(i.p,{children:["The update method is evoked with two parameters: ",(0,s.jsx)(i.code,{children:"data"})," (discussed below), and\n",(0,s.jsx)(i.code,{children:"seriesOptions"}),". seriesOptions is a reference to the currently applied options\nfor the series"]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.a,{href:"/lightweight-charts/docs/next/api/interfaces/PaneRendererCustomData",children:(0,s.jsx)(i.code,{children:"PaneRendererCustomData"})}),"\ninterface provides the data that can be used within the renderer for drawing the\nseries data. It includes the following properties:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"bars"}),": List of all the series' items and their x coordinates. See\n",(0,s.jsx)(i.a,{href:"/lightweight-charts/docs/next/api/interfaces/CustomBarItemData",children:(0,s.jsx)(i.code,{children:"CustomBarItemData"})})," for more details"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"barSpacing"}),": Spacing between consecutive bars."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"visibleRange"}),": The current visible range of items on the chart."]}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"price-value-builder",children:"Price Value Builder"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["ICustomSeriesPaneView property:\n",(0,s.jsx)(i.a,{href:"/lightweight-charts/docs/next/api/interfaces/ICustomSeriesPaneView#pricevaluebuilder",children:(0,s.jsx)(i.code,{children:"priceValueBuilder"})})]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"A function for interpreting the custom series data and returning an array of\nnumbers representing the prices values for the item, specifically the equivalent\nhighest, lowest, and current price values for the data item."}),"\n",(0,s.jsx)(i.p,{children:"These price values are used by the chart to determine the auto-scaling (to\nensure the items are in view) and the crosshair and price line positions. The\nlargest and smallest values in the array will be used to specify the visible\nrange of the painted item, and the last value will be used for the crosshair and\nprice line position."}),"\n",(0,s.jsx)(i.h3,{id:"whitespace",children:"Whitespace"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["ICustomSeriesPaneView property:\n",(0,s.jsx)(i.a,{href:"/lightweight-charts/docs/next/api/interfaces/ICustomSeriesPaneView#iswhitespace",children:(0,s.jsx)(i.code,{children:"isWhitespace"})})]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["A function used by the library to determine which data points provided by the\nuser should be considered Whitespace. The method should return ",(0,s.jsx)(i.code,{children:"true"})," when the\ndata point is Whitespace. Data points which are whitespace data won't be provided to\nthe renderer, or the ",(0,s.jsx)(i.code,{children:"priceValueBuilder"}),"."]}),"\n",(0,s.jsx)(i.h3,{id:"default-options",children:"Default Options"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["ICustomSeriesPaneView property:\n",(0,s.jsx)(i.a,{href:"/lightweight-charts/docs/next/api/interfaces/ICustomSeriesPaneView#defaultoptions",children:(0,s.jsx)(i.code,{children:"defaultOptions"})})]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["The default options to be used for the series. The user can override these\nvalues using the options argument in\n",(0,s.jsx)(i.a,{href:"/lightweight-charts/docs/next/api/interfaces/IChartApi#addcustomseries",children:(0,s.jsx)(i.code,{children:"addCustomSeries"})}),", or via the\n",(0,s.jsx)(i.a,{href:"/lightweight-charts/docs/next/api/interfaces/ISeriesApi#applyoptions",children:(0,s.jsx)(i.code,{children:"applyOptions"})})," method on the\n",(0,s.jsx)(i.code,{children:"ISeriesAPI"}),"."]}),"\n",(0,s.jsx)(i.h3,{id:"destroy",children:"Destroy"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["ICustomSeriesPaneView property:\n",(0,s.jsx)(i.a,{href:"/lightweight-charts/docs/next/api/interfaces/ICustomSeriesPaneView#destroy",children:(0,s.jsx)(i.code,{children:"destroy"})})]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"This method will be evoked when the series has been removed from the chart. This\nmethod should be used to clean up any objects, references, and other items that\ncould potentially cause memory leaks."}),"\n",(0,s.jsx)(i.p,{children:"This method should contain all the necessary code to clean up the object before\nit is removed from memory. This includes removing any event listeners or timers\nthat are attached to the object, removing any references to other objects, and\nresetting any values or properties that were modified during the lifetime of the\nobject."})]})}function l(e={}){let{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},50065:function(e,i,t){t.d(i,{Z:function(){return d},a:function(){return a}});var n=t(67294);let s={},r=n.createContext(s);function a(e){let i=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);